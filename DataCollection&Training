import os
import mediapipe as mp
import cv2
import matplotlib.pyplot as plt
import pickle
print(mp.__version__) #checking if mediapipe is working correctly

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles

hands = mp_hands.Hands(static_image_mode=True, min_detection_confidence=0.3)
DATA_DIR = './data'

data =[]
labels =[]
for dir_ in os.listdir(DATA_DIR):
    for img_path in os.listdir(os.path.join(DATA_DIR,dir_)):
        data_aux =[]
        img = cv2.imread(os.path.join(DATA_DIR, dir_, img_path))
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        #convert image into rgb to be able to input it into mediapipe
        #with mideapipe all landmark detection is always using rgb so since
        #are reading images in bgr we need to convert them to rgb
        results = hands.process(img_rgb) 
        #detecting the landmark in the image 
        #we have to iterate through the landmarks (hands)
        if results. multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                for i in range (len(hand_landmarks.landmark)):
                    x= hand_landmarks.landmark[i].x
                    y= hand_landmarks.landmark[i].y
                    data_aux.append(x)
                    data_aux.append(y)

            if len(data_aux) == 42:
                data.append(data_aux)
                labels.append(dir_)
 

f = open('data.pickle', 'wb')
pickle.dump({'data': data, 'labels': labels},f)
f.close()
                    #for each one of the landmarks we're gonna have x,y & z coordinates
                    #we will only be using the x and y coords and we will create an array 
                    #and we will train and inference this classifier by using the arrays

                #mp.drawing.draw_landmarks(
                    #img_rgb, hand_landmarks, mp_hands.HAND_CONNECTIONS,
                    #mp_drawing_styles.get_default_hand_landmarks_style(),
                    #mp_drawing_styles.get_default_hand_connections_style()
                #) 
             #iterating through all the results we have in the hand detection
            #we're iterating through 0, 1 or 2 hands so it makes sense to iterate 
            #then for each one of our results we will draw the landmarks using the draw landmarks function

            #we take all of our landmarks and we need to create an array for them 

        #plt.figure()
       # plt.imshow(img_rgb) 
